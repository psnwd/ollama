export GOOS?=$(shell go env GOOS)
export GOARCH?=$(shell go env GOARCH)

default: build

build: llama/build/$(GOOS)-$(GOARCH)

export GOFLAGS=-trimpath

llama/build/%/runners/metal: GOFLAGS+=-tags=metal
llama/build/%/runners/cpu_avx: GOFLAGS+=-tags=avx
llama/build/%/runners/cpu_avx2: GOFLAGS+=-tags=avx2
llama/build/%/runners/cuda_v11: GOFLAGS+=-tags=cuda,cuda_v11
llama/build/%/runners/cuda_v12: GOFLAGS+=-tags=cuda,cuda_v12
llama/build/%/runners/rocm: GOFLAGS+=-tags=cuda,rocm

.PHONY: llama/build/darwin-amd64
llama/build/darwin-amd64: llama/build/darwin-amd64/runners/cpu_avx

.PHONY: llama/build/darwin-arm64
llama/build/darwin-arm64: llama/build/darwin-arm64/runners/metal

.PHONY: llama/build/linux-amd64
llama/build/linux-amd64: llama/build/linux-amd64/runners/cpu_avx
llama/build/linux-amd64: llama/build/linux-amd64/runners/cpu_avx2

.PHONY: llama/build/windows-amd64
llama/build/windows-amd64: llama/build/windows-amd64/runners/cpu_avx
llama/build/windows-amd64: llama/build/windows-amd64/runners/cpu_avx2

.PHONY: cuda_v11 cuda_v12
cuda_v11 cuda_v12 rocm:
	$(MAKE) -C ml/backend/ggml/ggml/ggml-cuda $@

NVCC11?=$(shell command -v /usr/local/cuda-11/bin/nvcc)
ifneq ($(NVCC11),)
ifeq ($(OLLAMA_SKIP_GENERATE_CUDA_11),)
cuda_v11: export CXX=$(NVCC11)
llama/build/linux-amd64: cuda_v11
llama/build/linux-amd64: llama/build/linux-amd64/runners/cuda_v11
endif
endif

NVCC12?=$(shell command -v /usr/local/cuda-12/bin/nvcc)
ifneq ($(NVCC12),)
ifeq ($(OLLAMA_SKIP_GENERATE_CUDA_12),)
cuda_v12: export CXX=$(NVCC12)
llama/build/linux-amd64: cuda_v12
llama/build/linux-amd64: llama/build/linux-amd64/runners/cuda_v12
endif
endif

HIPCC?=$(shell command -v hipcc)
ifneq ($(HIPCC),)
ifeq ($(OLLAMA_SKIP_GENERATE_ROCM),)
rocm: export CXX=$(HIPCC)
llama/build/linux-amd64: rocm
llama/build/linux-amd64: llama/build/linux-amd64/runners/rocm
endif
endif

export CGO_ENABLED=1
export CGO_CPPFLAGS_ALLOW=-mfma|-mf16c

llama/build/%: llama/runner
	mkdir -p $@; go build -o $@ ./$<
